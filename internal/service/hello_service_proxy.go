// Code generated by protoc-gen-go-http. DO NOT EDIT.
// Code generated by protoc-gen-go-http. DO NOT EDIT.
// Code generated by protoc-gen-go-http. DO NOT EDIT.
// Generate time:  2006-01-02 15:04:05

package service

import (
	"context"
	"log"
	"time"

	pb "github.com/frochyzhang/ag-layout/api/helloworld"
	mw "github.com/frochyzhang/ag-layout/internal/service/middleware"
)

// ===================== 接口定义 =====================

// 代理接口
type HelloProxy interface {
	pb.HelloServer
	AddMiddleware(m mw.Middleware)
}

// ===================== 代理实现 =====================

type helloProxyImpl struct {
	service     interface{} // 原始服务实例
	middlewares []mw.Middleware
}

func NewHelloProxy(service *HelloService) HelloProxy {
	return &helloProxyImpl{
		service:     service,
		middlewares: make([]mw.Middleware, 0),
	}
}

func (p *helloProxyImpl) AddMiddleware(m mw.Middleware) {
	p.middlewares = append(p.middlewares, m)
}

// ======== Hello 代理方法 ========

func (p *helloProxyImpl) CreateHello(ctx context.Context, in *pb.Hello1Request) (*pb.Hello1Reply, error) {
	start := time.Now()
	methodName := "CreateHello"

	// 创建处理链
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		// 最终调用原始服务方法
		s := p.service.(pb.HelloServer)
		return s.CreateHello(ctx, req.(*pb.Hello1Request))
	}

	// 应用中间件
	for i := len(p.middlewares) - 1; i >= 0; i-- {
		mw := p.middlewares[i]
		next := handler
		handler = func(ctx context.Context, req interface{}) (interface{}, error) {
			return mw(methodName, ctx, req, next)
		}
	}

	// 执行调用链
	res, err := handler(ctx, in)
	if err != nil {
		log.Printf("[%s] failed in %v: %v", methodName, time.Since(start), err)
		return nil, err
	}

	log.Printf("[%s] success in %v", methodName, time.Since(start))
	return res.(*pb.Hello1Reply), nil
}
