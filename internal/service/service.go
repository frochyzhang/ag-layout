// Code generated by protoc-gen-go-http. DO NOT EDIT.
// Code generated by protoc-gen-go-http. DO NOT EDIT.
// Code generated by protoc-gen-go-http. DO NOT EDIT.
// Generate time:  2006-01-02 15:04:05
package service

import (
	"context"
	mw "github.com/frochyzhang/ag-core/ag/ag_ext"
	"github.com/frochyzhang/ag-layout/api/helloworld"
	"go.uber.org/fx"
	"log"
)

var FxServiceModule = fx.Module("fx-service",
	fx.Provide(
		//NewTmMiddlewareContext,
		NewGreeterService,
		NewGreeterProxyWithParams,
		NewHelloService,
		NewHelloProxyWithParams,
	),
	fx.Provide(
		fx.Annotate(
			func() mw.PrioritizedMiddleware { return GlobalTraceMiddleWare{} },
			fx.ResultTags(`group:"fx_global_service_middleware"`),
		),
		fx.Annotate(
			func() mw.PrioritizedMiddleware { return mw.LoggingMiddleware{} },
			fx.ResultTags(`group:"fx_greeter_service_middleware"`),
		),
		fx.Annotate(
			func() mw.PrioritizedMiddleware { return mw.LoggingMiddleware{} },
			fx.ResultTags(`group:"fx_hello_service_middleware"`),
		),
	),
)

type BaseFxMiddlewareParams struct {
	fx.In
	GlobalMws []mw.PrioritizedMiddleware `group:"fx_global_service_middleware" ,optional:"true"`
}

type FxGreeterMiddleware struct {
	BaseFxMiddlewareParams
	CustomMws []mw.PrioritizedMiddleware `group:"fx_greeter_service_middleware" ,optional:"true"`
}

func NewGreeterProxyWithParams(in FxGreeterMiddleware, service *GreeterService) helloworld.GreeterServer {
	return NewGreeterProxy(service, append(in.GlobalMws, in.CustomMws...))
}

type FxHelloMiddleware struct {
	BaseFxMiddlewareParams
	CustomMws []mw.PrioritizedMiddleware `group:"fx_hello_service_middleware" ,optional:"true"`
}

func NewHelloProxyWithParams(in FxHelloMiddleware, service *HelloService) helloworld.HelloServer {
	return NewHelloProxy(service, append(in.GlobalMws, in.CustomMws...))
}

type GlobalTraceMiddleWare struct{}

func (g GlobalTraceMiddleWare) GetOrder() int {
	return mw.MiddlewarePriorityHigh
}

func (g GlobalTraceMiddleWare) GetMiddleware() mw.Middleware {
	return func(method string, ctx context.Context, req interface{}, next func(context.Context, interface{}) (interface{}, error)) (interface{}, error) {
		log.Println("全局事务开启啦")
		res, err := next(ctx, req)
		log.Println("<UNK>")
		return res, err
	}
}
