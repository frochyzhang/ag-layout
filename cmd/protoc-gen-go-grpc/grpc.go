package main

import (
	"fmt"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/types/descriptorpb"
	"time"
)

const (
	contextPackage   = protogen.GoImportPath("context")
	errorsPackage    = protogen.GoImportPath("errors")
	protoPackage     = protogen.GoImportPath("google.golang.org/protobuf/proto")
	clientPackage    = protogen.GoImportPath("github.com/cloudwego/kitex/client")
	streamingPackage = protogen.GoImportPath("github.com/cloudwego/kitex/pkg/streaming")
	fxPackage        = protogen.GoImportPath("go.uber.org/fx")
	kitextPackage    = protogen.GoImportPath("github.com/cloudwego/kitex/pkg/serviceinfo")
	agksPackage      = protogen.GoImportPath("github.com/frochyzhang/ag-core/ag/ag_kitex/server")
)

// generateFile generates a _grpc.pb.go file containing kratos errors definitions.
func generateFile(gen *protogen.Plugin, file *protogen.File, omitempty bool, omitemptyPrefix string) *protogen.GeneratedFile {
	if len(file.Services) == 0 {
		return nil
	}
	filename := file.GeneratedFilenamePrefix + "_grpc.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-go-grpc. DO NOT EDIT.")
	g.P("// Code generated by protoc-gen-go-grpc. DO NOT EDIT.")
	g.P("// Code generated by protoc-gen-go-grpc. DO NOT EDIT.")
	g.P(fmt.Sprintf("// Generate time: %s", time.DateTime))
	g.P("// versions:")
	g.P(fmt.Sprintf("// - protoc-gen-go-grpc %s", release))
	g.P("// - protoc             ", protocVersion(gen))
	if file.Proto.GetOptions().GetDeprecated() {
		g.P("// ", file.Desc.Path(), " is a deprecated file.")
	} else {
		g.P("// source: ", file.Desc.Path())
	}
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()
	generateFileContent(gen, file, g, omitempty, omitemptyPrefix)
	return g
}

// generateFileContent generates the kratos errors definitions, excluding the package statement.
func generateFileContent(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, omitempty bool, omitemptyPrefix string) {
	if len(file.Services) == 0 {
		return
	}
	g.P("// This is a compile-time assertion to ensure that this generated file")
	g.P("// is compatible with the kratos package it is being compiled against.")
	g.P("var _ = new(", contextPackage.Ident("Context"), ")")
	g.P("var _ = ", errorsPackage.Ident("Join()"))
	g.P("var _ = ", protoPackage.Ident("Error"))
	g.P("var _ = ", clientPackage.Ident("Option{}"))
	g.P("var _ = ", streamingPackage.Ident("Args{}"))
	g.P("var _ = ", fxPackage.Ident("Self()"))
	g.P("var _ = ", kitextPackage.Ident("ServiceInfo{}"))
	g.P("var _ = ", agksPackage.Ident("Server{}"))
	g.P()

	for _, service := range file.Services {
		genService(gen, file, g, service, omitempty, omitemptyPrefix)
	}
}

func genService(_ *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, service *protogen.Service, omitempty bool, omitemptyPrefix string) {
	if service.Desc.Options().(*descriptorpb.ServiceOptions).GetDeprecated() {
		g.P("//")
		g.P(deprecationComment)
	}

	// Grpc Server.
	serviceName := fmt.Sprintf("%s", service.GoName)
	pkgInfo := PkgInfo{
		PkgName:    string(file.GoPackageName),
		PkgRefName: string(file.GoPackageName),
		//ImportPath: "github.com/frochyzhang/ag-layout/hertz/hello",
	}
	si := &ServiceInfo{
		PkgInfo:        pkgInfo,
		ServiceName:    serviceName,
		RawServiceName: serviceName,
		ServiceType:    serviceName,
		ServiceTypeName: func() string {
			return fmt.Sprintf("%sGRPCServer", service.GoName)
		},
		AllMethods:            []*MethodInfo{},
		HasStreaming:          false,
		ServiceFilePath:       "",
		Protocol:              "",
		HandlerReturnKeepResp: false,
		UseThriftReflection:   false,
		RefName:               "",
		GenerateHandler:       true,
	}
	pi := &PackageInfo{
		ServiceInfo:    si,
		Services:       append([]*ServiceInfo{}, si),
		Codec:          "protobuf",
		NoFastAPI:      true,
		Version:        release,
		FrugalPretouch: false,
		StreamX:        false,
	}
	for _, method := range service.Methods {
		name := method.Input.GoIdent.GoName
		mi := &MethodInfo{
			PkgInfo:                pkgInfo,
			ServiceName:            serviceName,
			Name:                   method.GoName,
			RawName:                method.GoName,
			Oneway:                 false,
			Void:                   false,
			IsResponseNeedRedirect: false,
			GenArgResultStruct:     true,
			IsStreaming:            false,
			ClientStreaming:        false,
			ServerStreaming:        false,
			Args: []*Parameter{
				{
					Deps:    []PkgInfo{pkgInfo},
					Name:    "Req",
					RawName: "Req",
					Type:    "*" + name,
				},
			},
			ArgsLength: 1,
			Resp: &Parameter{
				Deps:    []PkgInfo{pkgInfo},
				Name:    "Resp",
				RawName: "Resp",
				Type:    "*" + method.Output.GoIdent.GoName,
			},
			ArgStructName: fmt.Sprintf("%s%s%s", method.GoName, method.Input.GoIdent.GoName, "Args"),
			ResStructName: fmt.Sprintf("%s%s%s", method.GoName, method.Output.GoIdent.GoName, "Result"),
		}

		si.AllMethods = append(si.AllMethods, mi)
	}
	g.P(pi.execute())
}

func protocVersion(gen *protogen.Plugin) string {
	v := gen.Request.GetCompilerVersion()
	if v == nil {
		return "(unknown)"
	}
	var suffix string
	if s := v.GetSuffix(); s != "" {
		suffix = "-" + s
	}
	return fmt.Sprintf("v%d.%d.%d%s", v.GetMajor(), v.GetMinor(), v.GetPatch(), suffix)
}

const deprecationComment = "// Deprecated: Do not use."
