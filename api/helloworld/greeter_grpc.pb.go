// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// Generate time: 2006-01-02 15:04:05
// versions:
// - protoc-gen-go-grpc v1.0.5
// - protoc             v5.28.0
// source: helloworld/greeter.proto

package helloworld

import (
	context "context"
	errors "errors"
	client "github.com/cloudwego/kitex/client"
	serviceinfo "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	server "github.com/frochyzhang/ag-core/ag/ag_kitex/server"
	fx "go.uber.org/fx"
	proto "google.golang.org/protobuf/proto"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = errors.Join()
var _ = proto.Error
var _ = client.Option{}
var _ = streaming.Args{}
var _ = fx.Self()
var _ = serviceinfo.ServiceInfo{}
var _ = server.Server{}

var greeterMethods = map[string]serviceinfo.MethodInfo{
	"CreateGreeter": serviceinfo.NewMethodInfo(
		createGreeterHandler,
		newCreateGreeterHelloRequestArgs,
		newCreateGreeterHelloReplyResult,
		false,
		serviceinfo.WithStreamingMode(serviceinfo.StreamingUnary),
	),
	"PutGreeter": serviceinfo.NewMethodInfo(
		putGreeterHandler,
		newPutGreeterHelloRequestArgs,
		newPutGreeterHelloReplyResult,
		false,
		serviceinfo.WithStreamingMode(serviceinfo.StreamingUnary),
	),
}

func Register_Greeter_GRPCServer(srv GreeterServer) server.Option {
	return server.WithServiceRegistrar(&server.ServiceRegistrar{
		ServiceInfo: NewGreeterServiceInfo(),
		Handler:     srv,
	})
}

// NewGreeterServiceInfo creates a new ServiceInfo containing all methods
func NewGreeterServiceInfo() *serviceinfo.ServiceInfo {
	return newGreeterServiceInfo(false, true, true)
}

// NewGreeterServiceInfoForClient creates a new ServiceInfo containing non-streaming methods
func NewGreeterServiceInfoForClient() *serviceinfo.ServiceInfo {
	return newGreeterServiceInfo(false, false, true)
}
func NewGreeterServiceInfoForStreamClient() *serviceinfo.ServiceInfo {
	return newGreeterServiceInfo(true, true, false)
}

func newGreeterServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *serviceinfo.ServiceInfo {
	serviceName := "Greeter"
	handlerType := (*GreeterServer)(nil)
	methods := map[string]serviceinfo.MethodInfo{}
	for name, m := range greeterMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "helloworld",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &serviceinfo.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    serviceinfo.Protobuf,
		KiteXGenVersion: "v1.0.5",
		Extra:           extra,
	}
	return svcInfo
}

func createGreeterHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(HelloRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(GreeterServer).CreateGreeter(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CreateGreeterHelloRequestArgs:
		success, err := handler.(GreeterServer).CreateGreeter(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateGreeterHelloReplyResult)
		realResult.Success = success
		return nil
	default:
		return errors.New("invalid message type for service method handler")
	}
}
func newCreateGreeterHelloRequestArgs() interface{} {
	return &CreateGreeterHelloRequestArgs{}
}

func newCreateGreeterHelloReplyResult() interface{} {
	return &CreateGreeterHelloReplyResult{}
}

type CreateGreeterHelloRequestArgs struct {
	Req *HelloRequest
}

func (p *CreateGreeterHelloRequestArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateGreeterHelloRequestArgs) Unmarshal(in []byte) error {
	msg := new(HelloRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateGreeterHelloRequestArgs_Req_DEFAULT *HelloRequest

func (p *CreateGreeterHelloRequestArgs) GetReq() *HelloRequest {
	if !p.IsSetReq() {
		return CreateGreeterHelloRequestArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateGreeterHelloRequestArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateGreeterHelloRequestArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateGreeterHelloReplyResult struct {
	Success *HelloReply
}

var CreateGreeterHelloReplyResult_Success_DEFAULT *HelloReply

func (p *CreateGreeterHelloReplyResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateGreeterHelloReplyResult) Unmarshal(in []byte) error {
	msg := new(HelloReply)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateGreeterHelloReplyResult) GetSuccess() *HelloReply {
	if !p.IsSetSuccess() {
		return CreateGreeterHelloReplyResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateGreeterHelloReplyResult) SetSuccess(x interface{}) {
	p.Success = x.(*HelloReply)
}

func (p *CreateGreeterHelloReplyResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateGreeterHelloReplyResult) GetResult() interface{} {
	return p.Success
}

func putGreeterHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(HelloRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(GreeterServer).PutGreeter(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *PutGreeterHelloRequestArgs:
		success, err := handler.(GreeterServer).PutGreeter(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*PutGreeterHelloReplyResult)
		realResult.Success = success
		return nil
	default:
		return errors.New("invalid message type for service method handler")
	}
}
func newPutGreeterHelloRequestArgs() interface{} {
	return &PutGreeterHelloRequestArgs{}
}

func newPutGreeterHelloReplyResult() interface{} {
	return &PutGreeterHelloReplyResult{}
}

type PutGreeterHelloRequestArgs struct {
	Req *HelloRequest
}

func (p *PutGreeterHelloRequestArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *PutGreeterHelloRequestArgs) Unmarshal(in []byte) error {
	msg := new(HelloRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var PutGreeterHelloRequestArgs_Req_DEFAULT *HelloRequest

func (p *PutGreeterHelloRequestArgs) GetReq() *HelloRequest {
	if !p.IsSetReq() {
		return PutGreeterHelloRequestArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *PutGreeterHelloRequestArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *PutGreeterHelloRequestArgs) GetFirstArgument() interface{} {
	return p.Req
}

type PutGreeterHelloReplyResult struct {
	Success *HelloReply
}

var PutGreeterHelloReplyResult_Success_DEFAULT *HelloReply

func (p *PutGreeterHelloReplyResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *PutGreeterHelloReplyResult) Unmarshal(in []byte) error {
	msg := new(HelloReply)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *PutGreeterHelloReplyResult) GetSuccess() *HelloReply {
	if !p.IsSetSuccess() {
		return PutGreeterHelloReplyResult_Success_DEFAULT
	}
	return p.Success
}

func (p *PutGreeterHelloReplyResult) SetSuccess(x interface{}) {
	p.Success = x.(*HelloReply)
}

func (p *PutGreeterHelloReplyResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PutGreeterHelloReplyResult) GetResult() interface{} {
	return p.Success
}

type kGreeterClient struct {
	c client.Client
}

func newGreeterServiceClient(c client.Client) *kGreeterClient {
	return &kGreeterClient{
		c: c,
	}
}

func (p *kGreeterClient) CreateGreeter(ctx context.Context, Req *HelloRequest) (r *HelloReply, err error) {
	var _args CreateGreeterHelloRequestArgs
	_args.Req = Req
	var _result CreateGreeterHelloReplyResult
	if err = p.c.Call(ctx, "CreateGreeter", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kGreeterClient) PutGreeter(ctx context.Context, Req *HelloRequest) (r *HelloReply, err error) {
	var _args PutGreeterHelloRequestArgs
	_args.Req = Req
	var _result PutGreeterHelloReplyResult
	if err = p.c.Call(ctx, "PutGreeter", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

var FxGreeterGRPCModule = fx.Module("fx_Greeter_GRPC",
	fx.Provide(
		fx.Annotate(
			Register_Greeter_GRPCServer,
			fx.ResultTags(`group:"ag_kitex_server_registrars"`),
		),
	),
)
